# Dockerfileのlint設定
name: Lint Dockerfile

on:
  # PRベースの変更に追従する
  push:
    branches: [main, develop]
    paths:
      - "**/Dockerfile"
  pull_request:
    paths:
      - "**/Dockerfile"

jobs:
  find_changed_dockerfiles:
    name: Find Changed Dockerfiles
    runs-on: ubuntu-latest
    outputs:
      dockerfile_list: ${{ steps.set-dockerfiles.outputs.dockerfiles }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴をフェッチ

      - name: Find Dockerfiles
        id: set-dockerfiles
        # git管理下のDockerfileを取得
        run: |
          # github.sha は、マージ後にそうなるであろうコードのコミット
          echo "github.sha: ${{ github.sha }}"
          # ベースブランチの最新のコミットを指す
          echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"

          # PRのベースブランチを取得
          BASE_BRANCH=${{ github.base_ref }}

          # 変更されたDockerfileを検出し、JSON配列に変換
          DOCKERFILES=$(
            git diff --name-only --diff-filter=ACMRT origin/${{ github.event.pull_request.base.ref }}...${{ github.sha }} \
              | grep Dockerfile \
              | jq -R -s -c 'split("\n")[:-1]'
          )

          # 結果が空の場合は空の配列を設定
          if [ "$DOCKERFILES" = "[]" ]; then
            echo "No Dockerfiles changed in this PR"
            echo "dockerfiles=[]" >> $GITHUB_OUTPUT
          else
            echo "dockerfiles=$DOCKERFILES" >> $GITHUB_OUTPUT
          fi

  lint_dockerfiles:
    needs: find_changed_dockerfiles
    name: Lint Changed Dockerfiles
    permissions:
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    if: ${{ needs.find_changed_dockerfiles.outputs.dockerfile_list != '[]' }}
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.find_changed_dockerfiles.outputs.dockerfile_list) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        id: hadolint
        # https://github.com/hadolint/hadolint-action
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          # Error レベルのみCIで落とす
          failure-threshold: error
          # Error 判定する場合は定義する
          # override-error: DL3016,DL3018

      # warning 以下の結果をPRにコメントする。errorの場合はCIがこける。
      - name: Update Pull Request
        uses: actions/github-script@v7
        env:
          DOCKERFILE_PATH: ${{ matrix.dockerfile }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commentMarker = '<!-- HADOLINT-COMMENT -->'
            const output = `${commentMarker}
            ### Hadolint results (warning or less) for \`${process.env.DOCKERFILE_PATH}\`

            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            // PRの全コメントを取得
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // マーカーを持つコメントを探す
            const botComment = comments.find(comment => comment.body.includes(commentMarker));

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }
